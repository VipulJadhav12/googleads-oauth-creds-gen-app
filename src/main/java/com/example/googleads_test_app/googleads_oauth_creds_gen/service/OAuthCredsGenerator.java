package com.example.googleads_test_app.googleads_oauth_creds_gen.service;

import com.example.googleads_test_app.googleads_oauth_creds_gen.utils.OAuthConfig;
import com.google.auth.oauth2.ClientId;
import com.google.auth.oauth2.UserAuthorizer;
import com.google.auth.oauth2.UserCredentials;
import com.google.common.collect.ImmutableList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigInteger;
import java.net.URI;
import java.security.SecureRandom;

@Service
public class OAuthCredsGenerator {

    private final OAuthConfig oAuthConfig;

    private static final ImmutableList<String> SCOPES =
            ImmutableList.<String>builder().add("https://www.googleapis.com/auth/adwords").build();

    @Autowired
    private OAuthCredsGenerator(OAuthConfig oAuthConfig) {
        this.oAuthConfig = oAuthConfig;
    }

    /*
    * Generates an authorization code for the Google Ads API.
    *   - The authorization code is used to generate OAuth credentials.
    *   - The authorization code is generated by the Google's Authorization server
    *   authorizing the application to access their Google Ads account.
    *
    * */
    public void generateAuthorizationCode() {

        // Creates an anti-forgery state token as described here:
        // https://developers.google.com/identity/protocols/OpenIDConnect#createxsrftoken
        String state = new BigInteger(130, new SecureRandom()).toString(32);

        UserAuthorizer userAuthorizer = UserAuthorizer.newBuilder()
                .setClientId(ClientId.of(oAuthConfig.getClientId(), oAuthConfig.getClientSecret()))
                .setScopes(SCOPES)
                .build();
        URI baseUri = URI.create(oAuthConfig.getRedirectUri());
        String encodedUrl = userAuthorizer.getAuthorizationUrl(oAuthConfig.getLoginEmailAddressHint(), state, baseUri)
                .toString();

        System.out.printf(
                "Paste this url in your browser:%n%s%n", encodedUrl
                );
    }

    /*
    *  Generates OAuth credentials for the Google Ads API.
    *   - The OAuth credentials are generated using the authorization code,
    *   which are used to authenticate the application to the Google Ads API.
    *   - The authorization code is generated by the Google's Authorization server.
    *
    * */
    public UserCredentials generateOAuthCredentials() throws IOException {

        UserAuthorizer userAuthorizer = UserAuthorizer.newBuilder()
                .setClientId(ClientId.of(oAuthConfig.getClientId(), oAuthConfig.getClientSecret()))
                .setScopes(SCOPES)
                .build();

        return userAuthorizer.getCredentialsFromCode(oAuthConfig.getAuthorizationCode(), URI.create(oAuthConfig.getRedirectUri()));
    }

    /*
    *  Prints the OAuth credentials to the console.
    *
    * */
    public void printOAuthCreds(UserCredentials userCredentials) {
        System.out.println(userCredentials.toString());
    }

}
